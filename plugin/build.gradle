import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.Path
import java.util.stream.Collectors

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

jar {
    baseName "${rootProject.name}"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
}

shadowJar {
    exclude "META-INF/*"
    archiveFileName = "${rootProject.name}-${version}.jar"
}

task copyBuildToServer(type: Copy) {
    mustRunAfter shadowJar
    from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
    into "../server/plugins"
}

task buildServer {
    dependsOn shadowJar, copyBuildToServer
}

task buildAndCopy {
    dependsOn build, shadowJar, copyBuildToServer
}

processResources {
    filesMatching("**/plugin.yml") {
        filter(ReplaceTokens, tokens: [
                "name"     : rootProject.name,
                "version"  : version,
                "MainClass": getMainClassFQDN(projectDir.toPath())
        ])
    }
}

static String getMainClassFQDN(Path projectPath) {
    List<Path> javaFileList = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .collect(Collectors.toList())
    Path mainClassFile = javaFileList.stream()
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst().get()
    return mainClassFile.toString().replace('\\', '.').replace('/', '.').replaceAll(".*src.main.java.|.java\$", "")
}